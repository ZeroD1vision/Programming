/******************************************************************************
*                               –ö—É—Ä—Å –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞                              *
*******************************************************************************
* Project type  : Linux Console Application                                   *
* Project name  : Lab_2                                                       *
* File name     : main.cpp                                                    *
* Language      : CPP                                                         *
* Programmers   : –®–∞–ª–∞–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–∞–∫—Å–∏–º–æ–≤–∏—á, –ù–∞—Ä–∑–∏–µ–≤ –ê—Ä—Ç–µ–º–∏–π –¢–∏–º—É—Ä–æ–≤–∏—á      *
* Modified By   :                                                             *
* Created       : 02.04.2025                                                  *
* Last Revision : 10.04.2025                                                  *
* Comment       : –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–∞–¥–∫–∞—Ö. –í–∞—Ä–∏–∞–Ω—Ç: 6                     *
******************************************************************************/

#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstring>
// –î–ª—è –ª–æ–∫–∞–ª–∏
#include <locale>
#include <codecvt>
#include <windows.h>

using namespace std;

// –ö–û–ù–°–¢–ê–ù–¢–´
const int MAX_PLANES = 100;
const int TIME_LEN = 6;
const int MODEL_LEN = 20;
const int BORT_LEN = 7;
const int AIRPORT_LEN = 4;
const int MAX_ERRORS = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫

// –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏–Ω–∞ –ø–æ–ª–µ–π
const int EXPECTED_TIME_LEN = 5;    // HH:MM
const int EXPECTED_BORT_LEN = 6;    // X-XXXX
const int EXPECTED_AIRPORT_LEN = 3; // APX
const int ALLOWED_FIELDS = 4;

// –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•
struct Plane {
    char time[TIME_LEN];
    int minutes;
    char model[MODEL_LEN];
    char bort[BORT_LEN];
    char airport[AIRPORT_LEN];
};

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
struct ErrorInfo {
    int line_num;
    char field_name[50]; // –£–≤–µ–ª–∏—á–µ–Ω –±—É—Ñ–µ—Ä –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—è
    char message[250];   // –£–≤–µ–ª–∏—á–µ–Ω –±—É—Ñ–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
};

/*******************************************************************************
*  –ü–†–û–¢–û–¢–ò–ü–´ –§–£–ù–ö–¶–ò–ô
******************************************************************************/
void print_error(const ErrorInfo& error);
int read_data(const char *filename, Plane *planes, int *count, ErrorInfo *errors, int *error_count);
void process_airport(Plane *planes, int count, const char *airport);
void purify(char* field);
int check_and_convert_time(const char *time, int line_num, ErrorInfo *errors, int *error_count);
void check_model_valid(const char *model, int line_num, ErrorInfo *errors, int *error_count);
void check_bort_valid(const char *bort, int line_num, ErrorInfo *errors, int *error_count);
void check_airport_valid(const char *airport, int line_num, ErrorInfo *errors, int *error_count);
void bubble_sort(int *indices, int size, Plane *data);
void print_table(int *indices, int size, Plane *data, const char *airport);

// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
const char *FILE_NAME = "tests/correct/test2.txt";

//–¢–ï–°–¢–´
// ----- –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ï ----- //

// –¢–µ—Å—Ç 1. –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
// const char *FILE_NAME = "tests/incorrect/test2.txt";

// –¢–µ—Å—Ç 2. –û—à–∏–±–∫–∞ –±–æ—Ä—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞  
// const char *FILE_NAME = "tests/incorrect/test3.txt";

// –¢–µ—Å—Ç 3. –û—à–∏–±–∫–∞ –∞—ç—Ä–æ–¥—Ä–æ–º–∞
// const char *FILE_NAME = "tests/incorrect/test4.txt";

// –¢–µ—Å—Ç 4. –ü—É—Å—Ç–∞—è –º–æ–¥–µ–ª—å
// const char *FILE_NAME = "tests/incorrect/test5.txt";

// –¢–µ—Å—Ç 5. –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
// const char *FILE_NAME = "tests/incorrect/test6.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ

// –¢–µ—Å—Ç 6. –°–º–µ—à–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
// const char *FILE_NAME = "tests/incorrect/test7.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ

// –¢–µ—Å—Ç 7. –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
// const char *FILE_NAME = "tests/incorrect/test8.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ

// –¢–µ—Å—Ç 8. –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
// const char *FILE_NAME = "tests/incorrect/test10.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ


// ----- –ö–û–†–†–ï–ö–¢–ù–´–ï ----- //

// –¶–µ–ª—å: –ê–±—Å–æ–ª—é—Ç–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// const char *FILE_NAME = "tests/correct/test1.txt";    // 12:30,BOEING-747,A-1234,AP1

// –¶–µ–ª—å: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
// const char *FILE_NAME = "tests/correct/test2.txt";    // 08:15,  AIRBUS-A320 , B-5678, AP2  

// –¶–µ–ª—å: –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –≤—Ä–µ–º—è (23:59)
// const char *FILE_NAME = "tests/correct/test3.txt";    // 23:59,CONCORDE,C-9999,AP3

// –¶–µ–ª—å: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
// const char *FILE_NAME = "tests/correct/test4.txt";    // 00:00,MINI-JET,A-0000,AP1

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ –≤—Å–µ –∞—ç—Ä–æ–¥—Ä–æ–º—ã
// const char *FILE_NAME = "tests/correct/test6.txt";    
/* 
Airport AP1: no landings
Airport AP2: no landings
Airport AP3: no landings
*/

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ 1-—ã–π –∞—ç—Ä–æ–¥—Ä–æ–º
// const char *FILE_NAME = "tests/correct/test7.txt";    // Airport AP1: no landings

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ 2-–æ–π –∞—ç—Ä–æ–¥—Ä–æ–º
// const char *FILE_NAME = "tests/correct/test8.txt";    // Airport AP2: no landings

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ 3-–∏–π –∞—ç—Ä–æ–¥—Ä–æ–º
// const char *FILE_NAME = "tests/correct/test9.txt";    // Airport AP3: no landings

// –¶–µ–ª—å: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å –¥–µ—Ñ–∏—Å–∞–º–∏
// const char *FILE_NAME = "tests/correct/test10.txt";

// –¶–µ–ª—å: –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏
// const char *FILE_NAME = "tests/correct/test11.txt"; //–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏.

// –¶–µ–ª—å: –ß–∞—Å—Ç–∏—á–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
// const char *FILE_NAME = "tests/correct/test12.txt"; //–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ —Å –æ–¥–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é —Å—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫.

// –¶–µ–ª—å: –í—Ä–µ–º—è —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
// const char *FILE_NAME = "tests/correct/test13.txt"; //–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–¥–∞ 00:05 –∏ 05:09.

// –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
// const char *FILE_NAME = "tests/correct/test1.txt";

// –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
// const char *FILE_NAME = "tests/incorrect/test9.txt";

/*******************************************************************************
*  –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø 
******************************************************************************/
int main() 
{
    SetConsoleOutputCP(CP_UTF8);
    setlocale(LC_ALL, "en_US.UTF-8");
    
    Plane planes[MAX_PLANES];
    int count = 0;
    const char *airports[] = {"AP1", "AP2", "AP3"};
    ErrorInfo errors[MAX_ERRORS];
    int error_count = 0;
    
    // –≠—Ö–æ-–ø–µ—á–∞—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    cout << "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: " << FILE_NAME << "\n\n";
    
    int err = read_data(FILE_NAME, planes, &count, errors, &error_count);
    
    // –í—ã–≤–æ–¥ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
    if (error_count > 0) {
        cout << "\n–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:\n";
        for (int i = 0; i < error_count; i++) {
            print_error(errors[i]);
        }
    }
    
    if (err == -1) {
        return 1;
    }

    // –≠—Ö–æ-–ø–µ—á–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    cout << "\n–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: " << count << "\n\n";
    
    for (int i = 0; i < 3; i++) {
        process_airport(planes, count, airports[i]);
    }
    
    return 0;
}

/*******************************************************************************
*  –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô
******************************************************************************/

void print_error(const ErrorInfo& error) 
{
    cout << "[31m";
    cout << "–°—Ç—Ä–æ–∫–∞ " << error.line_num << ", –ø–æ–ª–µ '" << error.field_name 
         << "': " << error.message;
    cout << "[0m\n";
}

int read_data(const char *filename, Plane *planes, int *count, ErrorInfo *errors, int *error_count) 
{
    ifstream file(filename);
    if (!file.is_open()) 
    {
        strncpy(errors[*error_count].field_name, "–§–∞–π–ª", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = 0;
        (*error_count)++;
        return -1;
    }

    char line[100];
    int line_num = 0;
    bool has_errors = false;

    while (file.getline(line, 100) && *count < MAX_PLANES) 
    {
        line_num++;
        
        // –≠—Ö–æ-–ø–µ—á–∞—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏
        cout << "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ " << line_num << ": " << line << endl;
        
        Plane p = {}; 
        int pos = 0;
        bool is_valid = true;
        bool is_empty = true;
        int comma_count = 0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        for (int i = 0; line[i] != '\0'; i++) 
        {
            if (line[i] != ' ' && line[i] != '\t') 
            {
                is_empty = false;
                break;
            }
        }
        if (is_empty) 
        {
            strncpy(errors[*error_count].field_name, "–°—Ç—Ä–æ–∫–∞", sizeof(errors[*error_count].field_name) - 1);
            strncpy(errors[*error_count].message, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞", sizeof(errors[*error_count].message) - 1);
            errors[*error_count].line_num = line_num;
            (*error_count)++;
            has_errors = true;
            continue;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—è—Ç—ã—Ö
        for (int i = 0; line[i] != '\0'; i++) 
        {
            if (line[i] == ',') comma_count++;
        }
        if (comma_count < 3) 
        {
            strncpy(errors[*error_count].field_name, "–°—Ç—Ä–æ–∫–∞", sizeof(errors[*error_count].field_name) - 1);
            strncpy(errors[*error_count].message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—è—Ç—ã—Ö)", sizeof(errors[*error_count].message) - 1);
            errors[*error_count].line_num = line_num;
            (*error_count)++;
            has_errors = true;
            continue;
        }

        // –ü–ê–†–°–ò–ù–ì –ü–û–õ–ï–ô
        for (int field_num = 0; field_num < ALLOWED_FIELDS; field_num++) 
        {
            char* dest = NULL;
            int max_len = 0;
            int j = 0;
            bool field_too_long = false;
            char temp_field[100] = {0}; // –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—è
            int temp_index = 0;

            if (field_num == 0) 
            {
                dest = p.time;
                max_len = TIME_LEN;
            } else if (field_num == 1) 
            {
                dest = p.model;
                max_len = MODEL_LEN;
            } else if (field_num == 2) 
            {
                dest = p.bort;
                max_len = BORT_LEN;
            } else 
            {
                dest = p.airport;
                max_len = AIRPORT_LEN;
            }

            while (line[pos] == ' ') pos++;

            // –ß–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
            while (line[pos] && line[pos] != ',' && temp_index < 99) 
            {
                temp_field[temp_index++] = line[pos++];
            }
            temp_field[temp_index] = '\0';

            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            purify(temp_field);
            int purified_len = strlen(temp_field);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è
            if (purified_len > max_len - 1) 
            {
                field_too_long = true;
                is_valid = false;
            }

            // –ö–æ–ø–∏—Ä—É–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            strncpy(dest, temp_field, max_len - 1);
            dest[max_len - 1] = '\0';

            // –ï—Å–ª–∏ –ø–æ–ª–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –¥–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
            if (field_too_long) 
            {
                const char* field_name = "";
                switch (field_num) 
                {
                    case 0: field_name = "–í—Ä–µ–º—è"; break;
                    case 1: field_name = "–ú–æ–¥–µ–ª—å"; break;
                    case 2: field_name = "–ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä"; break;
                    case 3: field_name = "–ê—ç—Ä–æ–¥—Ä–æ–º"; break;
                }
                char msg[250];
                snprintf(msg, sizeof(msg), "–ü–æ–ª–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º %d —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ %d)", 
                         max_len - 1, purified_len);
                strncpy(errors[*error_count].field_name, field_name, sizeof(errors[*error_count].field_name) - 1);
                strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
                errors[*error_count].line_num = line_num;
                (*error_count)++;
            }

            if (line[pos] == ',') 
            {
                pos++;
            }
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—è
        while (line[pos] == ' ') pos++;

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        int prev_error_count = *error_count;

        // –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò (–ø–µ—Ä–≤–æ–π, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ —à–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        p.minutes = check_and_convert_time(p.time, line_num, errors, error_count);
        if (p.minutes < 0) 
        {
            is_valid = false;
        }

        // –í–ê–õ–ò–î–ê–¶–ò–Ø –û–°–¢–ê–õ–¨–ù–´–• –ü–û–õ–ï–ô
        check_model_valid(p.model, line_num, errors, error_count);
        check_bort_valid(p.bort, line_num, errors, error_count);
        check_airport_valid(p.airport, line_num, errors, error_count);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        if (line[pos] != '\0') 
        {
            strncpy(errors[*error_count].field_name, "–°—Ç—Ä–æ–∫–∞", sizeof(errors[*error_count].field_name) - 1);
            strncpy(errors[*error_count].message, "–õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏", sizeof(errors[*error_count].message) - 1);
            errors[*error_count].line_num = line_num;
            (*error_count)++;
            is_valid = false;
        }

        // –ï—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if (*error_count > prev_error_count) 
        {
            is_valid = false;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞
        if (is_valid) 
        {
            planes[(*count)++] = p;
        } else {
            has_errors = true;
        }
    }
    file.close();
    return has_errors ? -7 : 0;
}

void purify(char* field) 
{
    char* read_ptr = field;
    char* write_ptr = field;
    
    while (*read_ptr) 
    {
        if (*read_ptr != ' ' && *read_ptr != '\t') {
            *write_ptr = *read_ptr;
            write_ptr++;
        }
        read_ptr++;
    }
    *write_ptr = '\0';
}

int check_and_convert_time(const char *time, int line_num, ErrorInfo *errors, int *error_count) 
{
    bool has_errors = false;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (strlen(time) != EXPECTED_TIME_LEN) 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å %d —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ %zu)", 
                 EXPECTED_TIME_LEN, strlen(time));
        strncpy(errors[*error_count].field_name, "–í—Ä–µ–º—è", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
        return -1;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    if (time[2] != ':') 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ':', –∞ –ø–æ–ª—É—á–µ–Ω '%c')", time[2]);
        strncpy(errors[*error_count].field_name, "–í—Ä–µ–º—è", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
        has_errors = true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for (int i = 0; i < EXPECTED_TIME_LEN; i++) 
    {
        if (i == 2) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if (time[i] < '0' || time[i] > '9') 
        {
            char msg[250];
            snprintf(msg, sizeof(msg), "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª '%c' –≤ –ø–æ–∑–∏—Ü–∏–∏ %d", time[i], i);
            strncpy(errors[*error_count].field_name, "–í—Ä–µ–º—è", sizeof(errors[*error_count].field_name) - 1);
            strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
            errors[*error_count].line_num = line_num;
            (*error_count)++;
            has_errors = true;
        }
    }
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
    int hours = (time[0]-'0')*10 + (time[1]-'0');
    int minutes = (time[3]-'0')*10 + (time[4]-'0');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    if (hours < 0 || hours >= 24) 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 00-23 (–ø–æ–ª—É—á–µ–Ω–æ %02d)", hours);
        strncpy(errors[*error_count].field_name, "–í—Ä–µ–º—è", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
        has_errors = true;
    }
    
    if (minutes < 0 || minutes >= 60) 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 00-59 (–ø–æ–ª—É—á–µ–Ω–æ %02d)", minutes);
        strncpy(errors[*error_count].field_name, "–í—Ä–µ–º—è", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
        has_errors = true;
    }

    return has_errors ? -1 : hours * 60 + minutes;
}

void check_model_valid(const char *model, int line_num, ErrorInfo *errors, int *error_count) 
{
    if (strlen(model) == 0) 
    {
        strncpy(errors[*error_count].field_name, "–ú–æ–¥–µ–ª—å", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, "–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ", sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
        return;
    }
    
    if (strlen(model) >= MODEL_LEN - 1) {
        char msg[250];
        snprintf(msg, sizeof(msg), "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–º–∞–∫—Å–∏–º—É–º %d —Å–∏–º–≤–æ–ª–æ–≤)", MODEL_LEN - 2);
        strncpy(errors[*error_count].field_name, "–ú–æ–¥–µ–ª—å", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
    }
}

void check_bort_valid(const char *bort, int line_num, ErrorInfo *errors, int *error_count) 
{
    int len = strlen(bort);
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
    if (len == 0) 
    {
        strncpy(errors[*error_count].field_name, "–ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, "–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ", sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
        return;
    }
    
    if (len > EXPECTED_BORT_LEN) 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –±–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä (–º–∞–∫—Å–∏–º—É–º %d —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ %d)", 
                 EXPECTED_BORT_LEN, len);
        strncpy(errors[*error_count].field_name, "–ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
        return;
    }
    
    if (len < EXPECTED_BORT_LEN) 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –±–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å %d —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ %d)", 
                 EXPECTED_BORT_LEN, len);
        strncpy(errors[*error_count].field_name, "–ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
        return;
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (bort[1] != '-') 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '-', –∞ –ø–æ–ª—É—á–µ–Ω '%c')", bort[1]);
        strncpy(errors[*error_count].field_name, "–ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
    }
    
    if (bort[0] < 'A' || bort[0] > 'Z') 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–ü–µ—Ä–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ A-Z (–ø–æ–ª—É—á–µ–Ω–æ '%c')", bort[0]);
        strncpy(errors[*error_count].field_name, "–ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
    }
    
    for (int i = 2; i < EXPECTED_BORT_LEN; i++) 
    {
        if (bort[i] < '0' || bort[i] > '9') 
        {
            char msg[250];
            snprintf(msg, sizeof(msg), "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª '%c' –≤ –ø–æ–∑–∏—Ü–∏–∏ %d (–æ–∂–∏–¥–∞–ª–∞—Å—å —Ü–∏—Ñ—Ä–∞)", bort[i], i);
            strncpy(errors[*error_count].field_name, "–ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä", sizeof(errors[*error_count].field_name) - 1);
            strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
            errors[*error_count].line_num = line_num;
            (*error_count)++;
        }
    }
}

void check_airport_valid(const char *airport, int line_num, ErrorInfo *errors, int *error_count) 
{
    if (strlen(airport) != EXPECTED_AIRPORT_LEN) 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å %d —Å–∏–º–≤–æ–ª–∞, –ø–æ–ª—É—á–µ–Ω–æ %zu)", 
                 EXPECTED_AIRPORT_LEN, strlen(airport));
        strncpy(errors[*error_count].field_name, "–ê—ç—Ä–æ–¥—Ä–æ–º", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
        return;
    }

    if (airport[0] != 'A' || airport[1] != 'P') 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'AP' (–ø–æ–ª—É—á–µ–Ω–æ '%.2s')", airport);
        strncpy(errors[*error_count].field_name, "–ê—ç—Ä–æ–¥—Ä–æ–º", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
    }
    
    if (airport[2] < '1' || airport[2] > '3') 
    {
        char msg[250];
        snprintf(msg, sizeof(msg), "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π 1-3 (–ø–æ–ª—É—á–µ–Ω–æ '%c')", airport[2]);
        strncpy(errors[*error_count].field_name, "–ê—ç—Ä–æ–¥—Ä–æ–º", sizeof(errors[*error_count].field_name) - 1);
        strncpy(errors[*error_count].message, msg, sizeof(errors[*error_count].message) - 1);
        errors[*error_count].line_num = line_num;
        (*error_count)++;
    }
}

void bubble_sort(int *indices, int size, Plane *data) 
{
    for (int i = 0; i < size-1; i++) 
    {
        for (int j = 0; j < size-i-1; j++) 
        {
            if (data[indices[j]].minutes < data[indices[j+1]].minutes) 
            {
                int temp = indices[j];
                indices[j] = indices[j+1];
                indices[j+1] = temp;
            }
        }
    }
}

void print_table(int *indices, int size, Plane *data, const char *airport) 
{
    if (size == 0) 
    {
        cout << "Airport " << airport << ": no landings\n";
        return;
    }
    
    cout << "\nAirport " << airport << ":\n";
    cout << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    cout << "‚îÇ Time       ‚îÇ Model         ‚îÇ Bort Number    ‚îÇ Airport        ‚îÇ\n";
    cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    
    for (int i = 0; i < size; i++) {
        const Plane &p = data[indices[i]];
        cout << "‚îÇ " << left << setw(11) << p.time << "‚îÇ "
             << setw(14) << p.model << "‚îÇ "
             << setw(15) << p.bort << "‚îÇ "
             << setw(15) << p.airport << "‚îÇ\n";
    }
    cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n";
}

void process_airport(Plane *planes, int count, const char *airport) 
{
    int indices[MAX_PLANES];
    int size = 0;
    
    for (int i = 0; i < count; i++) 
    {
        if (strncmp(planes[i].airport, airport, EXPECTED_AIRPORT_LEN) == 0) 
        {
            indices[size++] = i;
        }
    }
    
    bubble_sort(indices, size, planes);
    print_table(indices, size, planes, airport);
}