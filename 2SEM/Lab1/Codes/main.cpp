/******************************************************************************
 *                               –ö—É—Ä—Å –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞                              *
 *******************************************************************************
 * Project type  : Linux Console Application                                   *
 * Project name  : Lab_2                                                       *
 * File name     : main.cpp                                                    *
 * Language      : CPP                                                         *
 * Programmers   : –®–∞–ª–∞–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–∞–∫—Å–∏–º–æ–≤–∏—á, –ù–∞—Ä–∑–∏–µ–≤ –ê—Ä—Ç–µ–º–∏–π –¢–∏–º—É—Ä–æ–≤–∏—á      *
 * Modified By   :                                                             *
 * Created       : 02.04.2025                                                  *
 * Last Revision : 10.04.2025                                                  *
 * Comment       : –î–≤—É–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã. –í–∞—Ä–∏–∞–Ω—Ç: 6                               *
 ******************************************************************************/

#include <iostream>
#include <fstream>
#include "lib/lib.h"

using namespace std;

// –¢–ï–°–¢–´
//  ----- –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ï ----- //

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
// const char *FILE_NAME_A = "tests/incorrect/A/1.txt";
// const char *FILE_NAME_B = "tests/incorrect/B/1.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–∞—Ö.
// const char *FILE_NAME_A = "tests/incorrect/A/2.txt";
// const char *FILE_NAME_B = "tests/incorrect/B/2.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞ –º–∞—Ç—Ä–∏—Ü—ã –ê
//             –∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ–∞–π–ª–∞ –º–∞—Ç—Ä–∏—Ü—ã –í, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤–∞.
// const char *FILE_NAME_A = "tests/incorrect/A/3.txt";
// const char *FILE_NAME_B = "tests/incorrect/B/3.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞ –º–∞—Ç—Ä–∏—Ü—ã B
//             –∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ–∞–π–ª–∞ –º–∞—Ç—Ä–∏—Ü—ã –ê, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç–æ–∏—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Ç—Ä–∏—Ü—ã
// const char *FILE_NAME_A = "tests/incorrect/A/4.txt";
// const char *FILE_NAME_B = "tests/incorrect/B/4.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ
//             –º–∞—Ç—Ä–∏—Ü—ã –ê –∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ–∞–π–ª–∞ –º–∞—Ç—Ä–∏—Ü—ã –í, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç–æ–∏—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã
//             –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π(10)
// const char *FILE_NAME_A = "tests/incorrect/A/5.txt";
// const char *FILE_NAME_B = "tests/incorrect/B/5.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã –ê
//             –∏ –Ω–∞–ª–∏—á–∏–∏ –±—É–∫–≤—ã –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –≤ –º–∞—Ç—Ä–∏—Ü–µ –í
// const char *FILE_NAME_A = "tests/incorrect/A/6.txt";
// const char *FILE_NAME_B = "tests/incorrect/B/6.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã B
//             –ø—Ä–∏ –µ—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –º–∏–Ω—É—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ–¥–Ω–∏–º –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
//             –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –≤ –º–∞—Ç—Ä–∏—Ü–µ A
// const char *FILE_NAME_A = "tests/incorrect/A/7.txt";
// const char *FILE_NAME_B = "tests/incorrect/B/7.txt";

// ----- –ö–û–†–†–ï–ö–¢–ù–´–ï ----- //

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞:  –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//              –¥–ª—è –º–∞—Ç—Ä–∏—Ü –ê –∏ –í
// const char *FILE_NAME_A = "tests/correct/A/1.txt";
// const char *FILE_NAME_B = "tests/correct/B/1.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞:  –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö
//              –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã –ê –∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã –í
// const char *FILE_NAME_A = "tests/correct/A/2.txt";
// const char *FILE_NAME_B = "tests/correct/B/2.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞:  –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞ —Å –º–∞—Ç—Ä–∏—Ü–µ–π –ê
//              –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–µ—á—ë—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ –í
// const char *FILE_NAME_A = "tests/correct/A/3.txt";
// const char *FILE_NAME_B = "tests/correct/B/3.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞:  –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
//              –Ω–∞–¥ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é –º–∞—Ç—Ä–∏—Ü—ã –ê (–ø—Ä–∏—á—ë–º –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
//              –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ –º–∞—Ç—Ä–∏—Ü—ã –í
// const char *FILE_NAME_A = "tests/correct/A/4.txt";
// const char *FILE_NAME_B = "tests/correct/B/4.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞:  –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –º–∞—Ç—Ä–∏—Ü—ã –ê
//              –∏ –ø—Ä–∏ —Ä–∞–∑–º–µ—Ä–µ –º–∞—Ç—Ä–∏—Ü—ã –í —Ä–∞–≤–Ω–æ–º 0
// const char *FILE_NAME_A = "tests/correct/A/5.txt";
// const char *FILE_NAME_B = "tests/correct/B/5.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞:  –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
//              –∏ –Ω–µ—á–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–¥ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é –≤ –º–∞—Ç—Ä–∏—Ü–µ –ê –∏ –Ω–∞–ª–∏—á–∏–µ–º —Å–ª–æ–≤–∞
//              –≤–º–µ—Å—Ç–æ —Ä–∞–∑–º–µ—Ä–∞ –≤ —Ñ–∞–π–ª–µ –º–∞—Ç—Ä–∏—Ü—ã –í
const char *FILE_NAME_A = "tests/correct/A/6.txt";
const char *FILE_NAME_B = "tests/correct/B/6.txt";

// —Ü–µ–ª—å —Ç–µ—Å—Ç–∞:  –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö
//              –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Ç—Ä–∏—Ü–µ –ê –∏ –Ω–∞–ª–∏—á–∏–µ–º –±—É–∫–≤—ã –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã –í
// const char *FILE_NAME_A = "tests/correct/A/7.txt";
// const char *FILE_NAME_B = "tests/correct/B/7.txt";

// —Ñ-—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏
void print_error(int err, const char *FILE_NAME, int N)
{
    cout << "[31m"; // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ç–µ–∫—Ç—Å–∞
    // –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (err == -1)
    {
        cout << "File \"" << FILE_NAME << "\" dosen`t exist\n";
    }
    // –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
    else if (err == -2)
    {
        cout << "File \"" << FILE_NAME << "\" is empty\n";
    }
    // –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Ç—Ä–∏—Ü—ã –∏–∑ —Ñ–∞–π–ª–∞
    else if (err == -3)
    {
        cout << "Failed reading size of matrix in file \""
             << FILE_NAME << "\" (there can be a letter)\n";
    }
    // –µ—Å–ª–∏ —Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã < 0
    else if (err == -4)
    {
        cout << "Size of matrix in file \""
             << FILE_NAME << "\" < 0\n";
    }
    // –µ—Å–ª–∏ —Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –±–æ–ª—å—à–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
    else if (err == -5)
    {
        cout << "Size of matrix in file \""
             << FILE_NAME << "\" is bigger then we expected\n";
    }
    // –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã
    else if (err == -6)
    {
        cout << "Failed reading matrix in file \""
             << FILE_NAME << "\" (there can be a letter)\n";
    }
    // –µ—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å –ª–∏—à–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    else if (err == -7)
    {
        cout << "There is too much information in file \""
             << FILE_NAME << "\".\nSome of it won`t be used\n";
    }
    // –µ—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    else if (err > 0)
    {
        cout << "Size of matrix in file \"" << FILE_NAME
             << "\" = " << N << ".\nIt must include " << N * N
             << " values, but there only " << err - 1 << "\n";
    }
    cout << "[0m\n"; // –≤—ã–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
}

int main()
{
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–•
    const int N_MAX = 10; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã
    int N_A = 0;          // —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã
    int N_B = 0;
    int matrix_A[N_MAX][N_MAX] = {0}; // –º–∞—Ç—Ä–∏—Ü–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Å—á–∏—Ç—ã–≤–∞–µ–º–∞—è
    int matrix_B[N_MAX][N_MAX] = {0};
    int err;   // –∫–æ–¥ –æ—à–∏–±–∫–∏ –∏–ª–∏ –±—É—Ñ–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    int i = 0; // —Å—á—ë—Ç—á–∏–∫–∏
    int j = 0;

    // –°–ß–ò–¢–´–í–ê–ù–ò–ï –ò –í–´–í–û–î –ú–ê–¢–†–ò–¶–´ A
    err = reading_matrix(FILE_NAME_A, matrix_A, &N_A);
    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    if (err != 0)
    {
        print_error(err, FILE_NAME_A, N_A);
    }
    // –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü—É
    if (err == 0 || err == -7)
    {
        cout << "For matrix_A " << N_A << "x" << N_A << " in file \"" << FILE_NAME_A << "\":\n";
        cout << "[33m"; // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∂—ë–ª—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        for (i = 0; i < N_A; i++)
        { // –≤—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü—É
            cout << "\t";
            for (j = 0; j < N_A; j++)
            {
                cout << matrix_A[i][j] << " ";
            } // for j
            cout << "\n";
        } // for i
        cout << "[0m - "; // –≤—ã–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –∂—ë–ª—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

        // –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é
        err = multiplication_neg_el(matrix_A, N_A);
        if (err == 0)
        {
            cout << "There is no negative elevents over main diagonal";
        }
        else
        {
            cout << "Result of multiplication negative elevents over main diagonal = [33m" << err;
        }
        cout << "[0m\n - ";

        // –≤—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω. –Ω–µ—á—ë—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        err = min_odd_el(matrix_A, N_A);
        if (err == 0)
        {
            cout << "There is no odd elevents in this matrix_A";
        }
        else
        {
            cout << "Min odd element = [33m" << err;
        }
        cout << "[0m\n";
    } // if (err == 0 || err == -7)

    cout << "\n";

    // –°–ß–ò–¢–´–í–ê–ù–ò–ï –ò –í–´–í–û–î –ú–ê–¢–†–ò–¶–´ B
    err = reading_matrix(FILE_NAME_B, matrix_B, &N_B);
    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    if (err != 0)
    {
        print_error(err, FILE_NAME_B, N_B);
    }
    // –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü—É
    if (err == 0 || err == -7)
    {
        cout << "For matrix_B " << N_B << "x" << N_B << " in file \"" << FILE_NAME_B << "\":\n";
        cout << "[33m"; // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∂—ë–ª—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        for (i = 0; i < N_B; i++)
        { // –≤—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü—É
            cout << "\t";
            for (j = 0; j < N_B; j++)
            {
                cout << matrix_B[i][j] << " ";
            } // for j
            cout << "\n";
        } // for i
        cout << "[0m - "; // –≤—ã–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –∂—ë–ª—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

        // –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é
        err = multiplication_neg_el(matrix_B, N_B);
        if (err == 0)
        {
            cout << "There is no negative elevents over main diagonal";
        }
        else
        {
            cout << "Result of multiplication negative elevents over main diagonal = [33m" << err;
        }
        cout << "[0m\n - ";

        // –≤—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω. –Ω–µ—á—ë—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        err = min_odd_el(matrix_B, N_B);
        if (err == 0)
        {
            cout << "There is no odd elevents in this matrix_B";
        }
        else
        {
            cout << "Min odd element = [33m" << err;
        }
        cout << "[0m\n";
    } // if (err == 0 || err == -7)

    cout << "\n\n";
    return 0;
}
/******************************* –ö–û–ù–ï–¶ main.cpp ******************************/