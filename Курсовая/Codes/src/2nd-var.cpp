/******************************************************************************
*                               –ö—É—Ä—Å –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞                              *
*******************************************************************************
* Project type  : Linux Console Application                                   *
* Project name  : Lab_2                                                       *
* File name     : main.cpp                                                    *
* Language      : CPP                                                         *
* Programmers   : –ù–∞—Ä–∑–∏–µ–≤ –ê—Ä—Ç–µ–º–∏–π –¢–∏–º—É—Ä–æ–≤–∏—á      *
* Modified By   :                                                             *
* Created       : 02.04.2025                                                  *
* Last Revision : 10.04.2025                                                  *
* Comment       : –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–∞–¥–∫–∞—Ö. –í–∞—Ä–∏–∞–Ω—Ç: 6                     *
******************************************************************************/

#include <iostream>
#include <fstream>
#include <iomanip>
// –î–ª—è –ª–æ–∫–∞–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
#include <locale>
#include <codecvt>
#include <windows.h>

using namespace std;

// –ö–û–ù–°–¢–ê–ù–¢–´
const int MAX_PLANES = 100;
const int TIME_LEN = 6;
const int MODEL_LEN = 20;
const int BORT_LEN = 7;
const int AIRPORT_LEN = 4;

// –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•
struct Plane {
    char time[TIME_LEN];       // HH:MM
    int minutes;               // –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    char model[MODEL_LEN];     // –º–æ–¥–µ–ª—å —Å–∞–º–æ–ª–µ—Ç–∞
    char bort[BORT_LEN];       // –±–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä
    char airport[AIRPORT_LEN]; // –∞—ç—Ä–æ–¥—Ä–æ–º
};

/*******************************************************************************
*  –ü–†–û–¢–û–¢–ò–ü–´ –§–£–ù–ö–¶–ò–ô
******************************************************************************/
void print_error(int err, const char* field, int line_num);
int read_data(const char *filename, Plane *planes, int *count);
void process_airport(Plane *planes, int count, const char *airport);
void purify(char* field);
bool is_time_valid(const char *time, int line_num);
bool is_bort_valid(const char *bort, int line_num);
bool is_airport_valid(const char *airport, int line_num);
void bubble_sort(int *indices, int size, Plane *data);
void print_table(int *indices, int size, Plane *data, const char *airport);

//–¢–ï–°–¢–´
// ----- –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ï ----- //

// –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞
// const char *FILE_NAME = "tests/incorrect/test1.txt";  // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

// –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (25:70)
// const char *FILE_NAME = "tests/incorrect/test2.txt";  // 25:70,BOEING-777,E-1111,AP1

// –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–æ—Ä—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
// const char *FILE_NAME = "tests/incorrect/test3.txt";  // 10:00,AIRBUS-A380,XYZ-12,AP2

// –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞—ç—Ä–æ–¥—Ä–æ–º–∞
// const char *FILE_NAME = "tests/incorrect/test4.txt";  // 09:45,SUPERJET-100,F-3333,INV

// –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Å—Ç—É—é –º–æ–¥–µ–ª—å
// const char *FILE_NAME = "tests/incorrect/test5.txt";  // 14:20,   ,G-4444,AP3


// ----- –ö–û–†–†–ï–ö–¢–ù–´–ï ----- //

// –¶–µ–ª—å: –ê–±—Å–æ–ª—é—Ç–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// const char *FILE_NAME = "tests/correct/test1.txt";    // 12:30,BOEING-747,A-1234,AP1

// –¶–µ–ª—å: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
// const char *FILE_NAME = "tests/correct/test2.txt";    // 08:15,  AIRBUS-A320 , B-5678, AP2  

// –¶–µ–ª—å: –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –≤—Ä–µ–º—è (23:59)
// const char *FILE_NAME = "tests/correct/test3.txt";    // 23:59,CONCORDE,C-9999,AP3

// –¶–µ–ª—å: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
// const char *FILE_NAME = "tests/correct/test4.txt";    // 00:00,MINI-JET,A-0000,AP1

// –¶–µ–ª—å: –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
const char *FILE_NAME = "tests/incorrect/test6.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ –≤—Å–µ –∞—ç—Ä–æ–¥—Ä–æ–º—ã
// const char *FILE_NAME = "tests/correct/test6.txt";    
/* 
Airport AP1: no landings
Airport AP2: no landings
Airport AP3: no landings
*/

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ 1-—ã–π –∞—ç—Ä–æ–¥—Ä–æ–º
// const char *FILE_NAME = "tests/correct/test7.txt";    // Airport AP1: no landings

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ 2-–æ–π –∞—ç—Ä–æ–¥—Ä–æ–º
// const char *FILE_NAME = "tests/correct/test8.txt";    // Airport AP2: no landings

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ 3-–∏–π –∞—ç—Ä–æ–¥—Ä–æ–º
// const char *FILE_NAME = "tests/correct/test9.txt";    // Airport AP3: no landings


// –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
// const char *FILE_NAME = "tests/correct/test1.txt";

/*******************************************************************************
*  –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø 
******************************************************************************/
int main() {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    SetConsoleOutputCP(CP_UTF8);
    setlocale(LC_ALL, "en_US.UTF-8");
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–•
    Plane planes[MAX_PLANES];
    int count = 0;
    const char *airports[] = {"AP1", "AP2", "AP3"};
    
    // –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–•
    int err = read_data(FILE_NAME, planes, &count);
    if (err != 0) {
        print_error(err, FILE_NAME, 0);
        return 1;
    }

    // –û–ë–†–ê–ë–û–¢–ö–ê –ê–≠–†–û–î–†–û–ú–û–í
    for (int i = 0; i < 3; i++) {
        process_airport(planes, count, airports[i]);
    }
    
    return 0;
}

/*******************************************************************************
*  –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô
******************************************************************************/

// —Ñ-—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏
void print_error(int err, const char* field, int line_num) {
    cout << "[31m"; // –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
    if (err == -1)      cout << "File \"" << field << "\" not found";
    else if (err == -2) cout << "Invalid time format in line " << line_num;
    else if (err == -3) cout << "Invalid bort number in line " << line_num;
    else if (err == -4) cout << "Invalid airport code in line " << line_num;
    else if (err == -5) cout << "Empty model in line " << line_num;
    cout << "[0m\n";
}

/******************************************************************************
* @brief –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
* @return - –ö–æ–¥ –æ—à–∏–±–∫–∏ (0 - —É—Å–ø–µ—Ö)
******************************************************************************/
int read_data(const char *filename, Plane *planes, int *count) {
    ifstream file(filename);
    if (!file.is_open()) return -1;

    char line[100];
    int line_num = 0;
    while (file.getline(line, 100) && *count < MAX_PLANES) {
        line_num++;
        Plane p = {};
        int pos = 0;

        // –ü–ê–†–°–ò–ù–ì –ü–û–õ–ï–ô
        for (int i = 0; i < 4; i++) {
            char* dest = i == 0 ? p.time : 
                        (i == 1 ? p.model : 
                        (i == 2 ? p.bort : p.airport));
            int max_len = i == 0 ? TIME_LEN-1 : 
                         (i == 1 ? MODEL_LEN-1 : 
                         (i == 2 ? BORT_LEN-1 : AIRPORT_LEN-1));

            int j = 0;
            while (line[pos] && line[pos] != ',' && j < max_len) {
                if (line[pos] != ' ') dest[j++] = line[pos];
                pos++;
            }
            dest[j] = '\0';
            while (line[pos] == ',' || line[pos] == ' ') pos++;
        }

        // –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ò
        purify(p.time);
        purify(p.model);
        purify(p.bort);
        purify(p.airport);

        if (p.model[0] == '\0') return -5;
        if (!is_time_valid(p.time, line_num)) return -2;
        if (!is_bort_valid(p.bort, line_num)) return -3;
        if (!is_airport_valid(p.airport, line_num)) return -4;

        // –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò
        p.minutes = ((p.time[0]-'0')*10 + (p.time[1]-'0'))*60 +
                    ((p.time[3]-'0')*10 + (p.time[4]-'0'));

        planes[(*count)++] = p;
    }
    file.close();
    return 0;
}

/******************************************************************************
* @brief –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
******************************************************************************/
void purify(char* field) {
    char* dst = field;
    for (; *field; field++) {
        if (*field != ' ' && *field != '\t') *dst++ = toupper(*field);
    }
    *dst = '\0';
}

/******************************************************************************
* @brief –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
******************************************************************************/
bool is_time_valid(const char *time, int line_num) {
    if (time[2] != ':' || time[5] != '\0') return false;
    for (int i = 0; i < 5; i++) {
        if (i == 2) continue;
        if (time[i] < '0' || time[i] > '9') return false;
    }
    int h = (time[0]-'0')*10 + (time[1]-'0');
    int m = (time[3]-'0')*10 + (time[4]-'0');
    return (h >= 0 && h < 24) && (m >= 0 && m < 60);
}

/******************************************************************************
* @brief –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –±–æ—Ä—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
******************************************************************************/
bool is_bort_valid(const char *bort, int line_num) {
    if (bort[1] != '-' || bort[6] != '\0') return false;
    if (bort[0] < 'A' || bort[0] > 'Z') return false;
    for (int i = 2; i < 6; i++) {
        if (bort[i] < '0' || bort[i] > '9') return false;
    }
    return true;
}

/******************************************************************************
* @brief –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞—ç—Ä–æ–¥—Ä–æ–º–∞
******************************************************************************/
bool is_airport_valid(const char *airport, int line_num) {
    const char valid[3][4] = {"AP1", "AP2", "AP3"};
    for (int i = 0; i < 3; i++) {
        bool match = true;
        for (int j = 0; j < 3; j++) {
            if (airport[j] != valid[i][j]) match = false;
        }
        if (match) return true;
    }
    return false;
}

/******************************************************************************
* @brief –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –º–µ—Ç–æ–¥–æ–º –ø—É–∑—ã—Ä—å–∫–∞
* @param indices - –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤
* @param size - —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
* @param data - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
******************************************************************************/
void bubble_sort(int *indices, int size, Plane *data) {
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–•
    int i = 0;
    int j = 0;
    int temp = 0;
    for (i = 0; i < size-1; i++) {
        for (j = 0; j < size-i-1; j++) {
            if (data[indices[j]].minutes < data[indices[j+1]].minutes) {
                temp = indices[j];
                indices[j] = indices[j+1];
                indices[j+1] = temp;
            }//if
        }//for j
    }//for i
}//bubble_sort

/******************************************************************************
* @brief –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
* @param indices - –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
* @param size - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
* @param data - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
* @param airport - –∫–æ–¥ –∞—ç—Ä–æ–¥—Ä–æ–º–∞
******************************************************************************/
void print_table(int *indices, int size, Plane *data, const char *airport) {
    // –ó–ê–ì–û–õ–û–í–û–ö
    cout << "\nAirport " << airport << ":\n";
    cout << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    cout << "‚îÇ Time       ‚îÇ Model         ‚îÇ Bort Number    ‚îÇ Airport        ‚îÇ\n";
    cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    
    // –î–ê–ù–ù–´–ï
    for (int i = 0; i < size; i++) {
        const Plane &p = data[indices[i]];
        cout << "‚îÇ " << left << setw(11) << p.time << "‚îÇ "
             << setw(14) << p.model << "‚îÇ "
             << setw(15) << p.bort << "‚îÇ "
             << setw(15) << p.airport << "‚îÇ\n";
    }//for
    
    cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n";
}//print_table

/******************************************************************************
* @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—ç—Ä–æ–¥—Ä–æ–º–∞
* @param planes - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
* @param count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
* @param airport - –∫–æ–¥ –∞—ç—Ä–æ–¥—Ä–æ–º–∞
******************************************************************************/
void process_airport(Plane *planes, int count, const char *airport) {
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–•
    int indices[MAX_PLANES];
    int size = 0;
    int i = 0;
    
    // –°–û–ë–ò–†–ê–ï–ú –ò–ù–î–ï–ö–°–´
    for (i = 0; i < count; i++) {
        bool match = true;
        for (int j = 0; j < 3; j++) {
            if (planes[i].airport[j] != airport[j]) match = false;
        }//for j
        if (match) indices[size++] = i;
    }//for i
    
    // –°–û–†–¢–ò–†–û–í–ö–ê –ò –í–´–í–û–î
    if (size == 0) {
        cout << "Airport " << airport << ": no landings\n";
        return;
    }//if
    
    bubble_sort(indices, size, planes);
    print_table(indices, size, planes, airport);
}//process_airport