/******************************************************************************
*                               –ö—É—Ä—Å –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞                              *
*******************************************************************************
* Project type  : Linux Console Application                                   *
* Project name  : Lab_2                                                       *
* File name     : main.cpp                                                    *
* Language      : CPP                                                         *
* Programmers   : –®–∞–ª–∞–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–∞–∫—Å–∏–º–æ–≤–∏—á, –ù–∞—Ä–∑–∏–µ–≤ –ê—Ä—Ç–µ–º–∏–π –¢–∏–º—É—Ä–æ–≤–∏—á      *
* Modified By   :                                                             *
* Created       : 02.04.2025                                                  *
* Last Revision : 10.04.2025                                                  *
* Comment       : –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–∞–¥–∫–∞—Ö. –í–∞—Ä–∏–∞–Ω—Ç: 6                     *
******************************************************************************/

#include <iostream>
#include <fstream>
#include <iomanip>
// –î–ª—è –ª–æ–∫–∞–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
#include <locale>
#include <codecvt>
#include <windows.h>

using namespace std;

// –ö–û–ù–°–¢–ê–ù–¢–´
const int MAX_PLANES = 100;
const int TIME_LEN = 6;
const int MODEL_LEN = 20;
const int BORT_LEN = 7;
const int AIRPORT_LEN = 4;

// –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•
struct Plane {
    char time[TIME_LEN];       // HH:MM
    int minutes;               // –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    char model[MODEL_LEN];     // –º–æ–¥–µ–ª—å —Å–∞–º–æ–ª–µ—Ç–∞
    char bort[BORT_LEN];       // –±–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä
    char airport[AIRPORT_LEN]; // –∞—ç—Ä–æ–¥—Ä–æ–º
};

/*******************************************************************************
*  –ü–†–û–¢–û–¢–ò–ü–´ –§–£–ù–ö–¶–ò–ô
******************************************************************************/
void print_error(int err, const char* field, int line_num);
int read_data(const char *filename, Plane *planes, int *count);
void process_airport(Plane *planes, int count, const char *airport);
void purify(char* field);
int is_time_valid(const char *time, int line_num);
int is_bort_valid(const char *bort, int line_num);
int is_airport_valid(const char *airport, int line_num);
void bubble_sort(int *indices, int size, Plane *data);
void print_table(int *indices, int size, Plane *data, const char *airport);

//–¢–ï–°–¢–´
// ----- –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ï ----- //

// –¢–µ—Å—Ç 1. –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
// const char *FILE_NAME = "tests/incorrect/test2.txt";

// –¢–µ—Å—Ç 2. –û—à–∏–±–∫–∞ –±–æ—Ä—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞  
// const char *FILE_NAME = "tests/incorrect/test3.txt";

// –¢–µ—Å—Ç 3. –û—à–∏–±–∫–∞ –∞—ç—Ä–æ–¥—Ä–æ–º–∞
// const char *FILE_NAME = "tests/incorrect/test4.txt";

// –¢–µ—Å—Ç 4. –ü—É—Å—Ç–∞—è –º–æ–¥–µ–ª—å
const char *FILE_NAME = "tests/incorrect/test5.txt";

// –¢–µ—Å—Ç 5. –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
// const char *FILE_NAME = "tests/incorrect/test6.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ

// –¢–µ—Å—Ç 6. –°–º–µ—à–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
// const char *FILE_NAME = "tests/incorrect/test7.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ

// –¢–µ—Å—Ç 7. –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
// const char *FILE_NAME = "tests/incorrect/test8.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ

// –¢–µ—Å—Ç 8. –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
// const char *FILE_NAME = "tests/incorrect/test9.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ

// –¢–µ—Å—Ç 9. –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
// const char *FILE_NAME = "tests/incorrect/test10.txt";    // –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ


// ----- –ö–û–†–†–ï–ö–¢–ù–´–ï ----- //

// –¶–µ–ª—å: –ê–±—Å–æ–ª—é—Ç–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// const char *FILE_NAME = "tests/correct/test1.txt";    // 12:30,BOEING-747,A-1234,AP1

// –¶–µ–ª—å: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
// const char *FILE_NAME = "tests/correct/test2.txt";    // 08:15,  AIRBUS-A320 , B-5678, AP2  

// –¶–µ–ª—å: –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –≤—Ä–µ–º—è (23:59)
// const char *FILE_NAME = "tests/correct/test3.txt";    // 23:59,CONCORDE,C-9999,AP3

// –¶–µ–ª—å: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
// const char *FILE_NAME = "tests/correct/test4.txt";    // 00:00,MINI-JET,A-0000,AP1

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ –≤—Å–µ –∞—ç—Ä–æ–¥—Ä–æ–º—ã
// const char *FILE_NAME = "tests/correct/test6.txt";    
/* 
Airport AP1: no landings
Airport AP2: no landings
Airport AP3: no landings
*/

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ 1-—ã–π –∞—ç—Ä–æ–¥—Ä–æ–º
// const char *FILE_NAME = "tests/correct/test7.txt";    // Airport AP1: no landings

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ 2-–æ–π –∞—ç—Ä–æ–¥—Ä–æ–º
// const char *FILE_NAME = "tests/correct/test8.txt";    // Airport AP2: no landings

// –¶–µ–ª—å: –ù–µ—Ç –ø–æ—Å–∞–¥–æ–∫ –Ω–∞ 3-–∏–π –∞—ç—Ä–æ–¥—Ä–æ–º
// const char *FILE_NAME = "tests/correct/test9.txt";    // Airport AP3: no landings

// –¶–µ–ª—å: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å –¥–µ—Ñ–∏—Å–∞–º–∏
// const char *FILE_NAME = "tests/correct/test10.txt";

// –¶–µ–ª—å: –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏
// const char *FILE_NAME = "tests/correct/test11.txt"; //–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏.

// –¶–µ–ª—å: –ß–∞—Å—Ç–∏—á–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
// const char *FILE_NAME = "tests/correct/test12.txt"; //–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ —Å –æ–¥–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é —Å—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫.

// –¶–µ–ª—å: –í—Ä–µ–º—è —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
// const char *FILE_NAME = "tests/correct/test13.txt"; //–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–¥–∞ 00:05 –∏ 05:09.

// –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
// const char *FILE_NAME = "tests/correct/test1.txt";

/*******************************************************************************
*  –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø 
******************************************************************************/
int main() {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    SetConsoleOutputCP(CP_UTF8);
    setlocale(LC_ALL, "en_US.UTF-8");
    Plane planes[MAX_PLANES];
    int count = 0;
    const char *airports[] = {"AP1", "AP2", "AP3"};
    
    int err = read_data(FILE_NAME, planes, &count);
    if (err == -1) {
        print_error(err, FILE_NAME, 0);
        return 1;
    }

    // –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ count > 0
    for (int i = 0; i < 3; i++) {
        process_airport(planes, count, airports[i]);
    }
    
    return 0;
}

/*******************************************************************************
*  –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô
******************************************************************************/

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
 * @param err –ö–æ–¥ –æ—à–∏–±–∫–∏ (–æ—Ç -1 –¥–æ -6).
 * @param field –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –ø–æ–ª–µ.
 * @param line_num –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–æ–π.
 * @note –¶–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: –∫—Ä–∞—Å–Ω—ã–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç ANSI-–∫–æ–¥—ã).
 */
void print_error(int err, const char* field, int line_num) {
    cout << "[31m";
    if (err == -1)      cout << "File \"" << field << "\" not found";
    else if (err == -2) cout << "Invalid time format in line " << line_num << " (skipped)";
    else if (err == -3) cout << "Invalid bort number in line " << line_num << " (skipped)";
    else if (err == -4) cout << "Invalid airport code in line " << line_num << " (skipped)";
    else if (err == -5) cout << "Empty model in line " << line_num << " (skipped)";
    else if (err == -6) cout << "Extra data in line " << line_num << " (skipped)";
    else if (err == -8) cout << "Empty line " << line_num << " (skipped)";
    cout << "[0m\n";
}

/**
 * –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–∞–¥–∫–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞, –ø–∞—Ä—Å–∏—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏—Ö.
 * @param filename –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏.
 * @param planes –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä Plane –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.
 * @param count –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.
 * @return 0 –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, -1 –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, -7 –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—à–∏–±–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö.
 * @note –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: "HH:MM,–ú–æ–¥–µ–ª—å,–ë–æ—Ä—Ç–æ–≤–æ–π_–Ω–æ–º–µ—Ä,–ê—ç—Ä–æ–¥—Ä–æ–º".
 */
int read_data(const char *filename, Plane *planes, int *count) {
    ifstream file(filename);
    if (!file.is_open()) return -1;

    char line[100];
    int line_num = 0;
    bool has_errors = false;

    while (file.getline(line, 100) && *count < MAX_PLANES) {
        line_num++;
        Plane p = {};
        int pos = 0;
        bool is_valid = true;

        // –ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        bool is_empty = true;
        for (int i = 0; line[i] != '\0'; i++) {
            if (line[i] != ' ' && line[i] != '\t') {
                is_empty = false;
                break;
            }
        }
        if (is_empty) {
            print_error(-8, filename, line_num);
            has_errors = true;
            continue;
        }

        // –ü–ê–†–°–ò–ù–ì –ü–û–õ–ï–ô
        for (int field_num = 0; field_num < 4 && is_valid; field_num++) {
            char* dest = field_num == 0 ? p.time : 
                        (field_num == 1 ? p.model : 
                        (field_num == 2 ? p.bort : p.airport));
            int max_len = field_num == 0 ? TIME_LEN-1 : 
                         (field_num == 1 ? MODEL_LEN-1 : 
                         (field_num == 2 ? BORT_LEN-1 : AIRPORT_LEN-1));

            // –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–ª–µ–º
            while (line[pos] == ' ') pos++;

            // –ß—Ç–µ–Ω–∏–µ –ø–æ–ª—è –¥–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
            int j = 0;
            while (line[pos] && line[pos] != ',' && j < max_len) {
                dest[j++] = line[pos++];
            }
            dest[j] = '\0';

            // –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª—è
            if (line[pos] == ',') {
                pos++;
                while (line[pos] == ' ') pos++;
            }
        }

        // –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø
        purify(p.time);
        purify(p.model);
        purify(p.bort);
        purify(p.airport);

        // –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–õ–ï–ô (—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –≤—ã—Ö–æ–¥–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ)
        if (p.model[0] == '\0') {
            print_error(-5, filename, line_num);
            is_valid = false;
        }
        else if (is_time_valid(p.time, line_num) != 0) {
            print_error(-2, filename, line_num);
            is_valid = false;
        }
        else if (is_bort_valid(p.bort, line_num) != 0) {
            print_error(-3, filename, line_num);
            is_valid = false;
        }
        else if (is_airport_valid(p.airport, line_num) != 0) {
            print_error(-4, filename, line_num);
            is_valid = false;
        }
        else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –≤–∞–ª–∏–¥–Ω—ã
            while (line[pos] == ' ') pos++;
            if (line[pos] != '\0') {
                print_error(-6, filename, line_num);
                is_valid = false;
            }
        }

        if (!is_valid) {
            has_errors = true;
            continue;
        }

        // –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò –ò –°–û–•–†–ê–ù–ï–ù–ò–ï
        p.minutes = ((p.time[0]-'0')*10 + (p.time[1]-'0'))*60 +
                    ((p.time[3]-'0')*10 + (p.time[4]-'0'));
        planes[(*count)++] = p;
    }
    file.close();
    return has_errors ? -7 : 0;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–µ: —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–∏–º–≤–æ–ª—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.
 * @param field –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
 * @note –ò–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É.
 */
void purify(char* field) {
    char* dst = field;
    for (; *field; field++) {
        if (*field != ' ' && *field != '\t') *dst++ = toupper(*field);
    }
    *dst = '\0';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (HH:MM).
 * @param time –°—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏.
 * @param line_num –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏).
 * @return 0 –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, -2 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
 */
int is_time_valid(const char *time, int line_num) {
    if (time[2] != ':' || time[5] != '\0') return -2;
    for (int i = 0; i < 5; i++) {
        if (i == 2) continue;
        if (time[i] < '0' || time[i] > '9') return -2;
    }
    int h = (time[0]-'0')*10 + (time[1]-'0');
    int m = (time[3]-'0')*10 + (time[4]-'0');
    return (h >= 0 && h < 24 && m >= 0 && m < 60) ? 0 : -2;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –±–æ—Ä—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (X-XXXX, –≥–¥–µ X ‚Äî –±—É–∫–≤–∞/—Ü–∏—Ñ—Ä–∞).
 * @param bort –ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä.
 * @param line_num –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏).
 * @return 0 –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, -3 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
 */
int is_bort_valid(const char *bort, int line_num) {
    if (bort[1] != '-' || bort[6] != '\0') return -3;
    if (bort[0] < 'A' || bort[0] > 'Z') return -3;
    for (int i = 2; i < 6; i++) {
        if (bort[i] < '0' || bort[i] > '9') return -3;
    }
    return 0;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∞—ç—Ä–æ–¥—Ä–æ–º–∞ (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: AP1, AP2, AP3).
 * @param airport –ö–æ–¥ –∞—ç—Ä–æ–¥—Ä–æ–º–∞.
 * @param line_num –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏).
 * @return 0 –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∫–æ–¥–µ, -4 –ø—Ä–∏ –æ—à–∏–±–∫–µ.
 */
int is_airport_valid(const char *airport, int line_num) {
    // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –Ω–∞—á–∞–ª–µ
    int len = 0;
    int i, j;
    bool match;
    const char valid[3][4] = {"AP1", "AP2", "AP3"};

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    while (airport[len] != '\0' && len < 4) len++;
    if (len != 3) return -4;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for (i = 0; i < 3; i++) {
        match = true;
        for (j = 0; j < 3; j++) {
            if (airport[j] != valid[i][j]) match = false;
        }
        if (match) return 0;
    }
    return -4;
}

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–∞–¥–∫–∏ (–æ—Ç –ø–æ–∑–¥–Ω–∏—Ö –∫ —Ä–∞–Ω–Ω–∏–º).
 * @param indices –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
 * @param size –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞.
 * @param data –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä Plane —Å –¥–∞–Ω–Ω—ã–º–∏.
 */
void bubble_sort(int *indices, int size, Plane *data) {
    for (int i = 0; i < size-1; i++) {
        for (int j = 0; j < size-i-1; j++) {
            if (data[indices[j]].minutes < data[indices[j+1]].minutes) {
                int temp = indices[j];
                indices[j] = indices[j+1];
                indices[j+1] = temp;
            }
        }
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞—ç—Ä–æ–¥—Ä–æ–º–∞.
 * @param indices –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–ø–∏—Å–µ–π.
 * @param size –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π.
 * @param data –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä Plane.
 * @param airport –ö–æ–¥ –∞—ç—Ä–æ–¥—Ä–æ–º–∞.
 * @note –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç "no landings".
 */
void print_table(int *indices, int size, Plane *data, const char *airport) {
    if (size == 0) {
        cout << "Airport " << airport << ": no landings\n";
        return;
    }
    cout << "\nAirport " << airport << ":\n";
    cout << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    cout << "‚îÇ Time       ‚îÇ Model         ‚îÇ Bort Number    ‚îÇ Airport        ‚îÇ\n";
    cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    for (int i = 0; i < size; i++) {
        const Plane &p = data[indices[i]];
        cout << "‚îÇ " << left << setw(11) << p.time << "‚îÇ "
             << setw(14) << p.model << "‚îÇ "
             << setw(15) << p.bort << "‚îÇ "
             << setw(15) << p.airport << "‚îÇ\n";
    }
    cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n";
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—ç—Ä–æ–¥—Ä–æ–º–∞: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –≤—ã–≤–æ–¥.
 * @param planes –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä Plane.
 * @param count –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π.
 * @param airport –ö–æ–¥ –∞—ç—Ä–æ–¥—Ä–æ–º–∞.
 */
void process_airport(Plane *planes, int count, const char *airport) {
    int indices[MAX_PLANES];
    int size = 0;
    for (int i = 0; i < count; i++) {
        bool match = true;
        for (int j = 0; j < 3; j++) {
            if (planes[i].airport[j] != airport[j]) match = false;
        }
        if (match) indices[size++] = i;
    }
    bubble_sort(indices, size, planes);
    print_table(indices, size, planes, airport);
}